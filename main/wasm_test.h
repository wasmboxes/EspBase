#include <wasm3.h>
#include "m3_env.h"

#define _FATAL(msg, ...) { printf("Fatal: " msg "\n", ##__VA_ARGS__); return 0; }

unsigned char fib32_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x60,
  0x01, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x07, 0x01, 0x03,
  0x66, 0x69, 0x62, 0x00, 0x00, 0x0a, 0x1f, 0x01, 0x1d, 0x00, 0x20, 0x00,
  0x41, 0x02, 0x49, 0x04, 0x40, 0x20, 0x00, 0x0f, 0x0b, 0x20, 0x00, 0x41,
  0x02, 0x6b, 0x10, 0x00, 0x20, 0x00, 0x41, 0x01, 0x6b, 0x10, 0x00, 0x6a,
  0x0f, 0x0b
};
unsigned int fib32_wasm_len = 62;

unsigned char multiple_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x02, 0x60,
  0x01, 0x7f, 0x01, 0x7f, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x03,
  0x02, 0x00, 0x01, 0x07, 0x10, 0x02, 0x03, 0x66, 0x61, 0x63, 0x00, 0x00,
  0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x00, 0x01, 0x0a, 0x21, 0x02,
  0x17, 0x00, 0x20, 0x00, 0x41, 0x02, 0x4c, 0x04, 0x7f, 0x20, 0x00, 0x05,
  0x20, 0x00, 0x20, 0x00, 0x41, 0x01, 0x6b, 0x10, 0x00, 0x6c, 0x0b, 0x0b,
  0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b
};
unsigned int multiple_wasm_len = 80;

unsigned char multiple2_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x02, 0x60,
  0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x03, 0x03,
  0x02, 0x01, 0x00, 0x07, 0x10, 0x02, 0x03, 0x66, 0x61, 0x63, 0x00, 0x00,
  0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x00, 0x01, 0x0a, 0x21, 0x02,
  0x17, 0x00, 0x20, 0x00, 0x41, 0x02, 0x4c, 0x04, 0x7f, 0x20, 0x00, 0x05,
  0x20, 0x00, 0x20, 0x00, 0x41, 0x01, 0x6b, 0x10, 0x00, 0x6c, 0x0b, 0x0b,
  0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b
};
unsigned int multiple2_wasm_len = 80;

unsigned char multiple3_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x01, 0x60,
  0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x03, 0x02, 0x01, 0x00, 0x07, 0x0a, 0x01,
  0x06, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x00, 0x00, 0x0a, 0x09, 0x01,
  0x07, 0x00, 0x20, 0x00, 0x20, 0x01, 0x6a, 0x0b
};
unsigned int multiple3_wasm_len = 44;


unsigned char fib_random[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x64,
  0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x30, 0x01, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x13, 0x04, 0x60, 0x00, 0x01, 0x7f, 0x60, 0x01, 0x7f, 0x01,
  0x7f, 0x60, 0x00, 0x00, 0x60, 0x02, 0x7f, 0x7f, 0x01, 0x7f, 0x02, 0x11,
  0x01, 0x03, 0x65, 0x6e, 0x76, 0x09, 0x67, 0x65, 0x74, 0x52, 0x61, 0x6e,
  0x64, 0x6f, 0x6d, 0x00, 0x00, 0x03, 0x06, 0x05, 0x02, 0x01, 0x01, 0x00,
  0x03, 0x07, 0x5b, 0x06, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f,
  0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x00, 0x01,
  0x18, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c,
  0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63,
  0x73, 0x00, 0x01, 0x09, 0x61, 0x64, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f,
  0x6d, 0x00, 0x02, 0x03, 0x66, 0x69, 0x62, 0x00, 0x03, 0x0f, 0x5f, 0x5f,
  0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x69,
  0x6e, 0x00, 0x04, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x05, 0x0a, 0xaa,
  0x01, 0x05, 0x03, 0x00, 0x01, 0x0b, 0x07, 0x00, 0x10, 0x00, 0x20, 0x00,
  0x6a, 0x0b, 0x91, 0x01, 0x01, 0x05, 0x7f, 0x41, 0x01, 0x21, 0x01, 0x02,
  0x40, 0x20, 0x00, 0x41, 0x00, 0x4c, 0x0d, 0x00, 0x20, 0x00, 0x41, 0x07,
  0x71, 0x21, 0x02, 0x02, 0x40, 0x20, 0x00, 0x41, 0x08, 0x49, 0x04, 0x40,
  0x41, 0x00, 0x21, 0x00, 0x0c, 0x01, 0x0b, 0x20, 0x00, 0x41, 0xf8, 0xff,
  0xff, 0xff, 0x07, 0x71, 0x21, 0x05, 0x41, 0x00, 0x21, 0x00, 0x03, 0x40,
  0x20, 0x00, 0x20, 0x01, 0x6a, 0x22, 0x00, 0x20, 0x01, 0x6a, 0x22, 0x01,
  0x20, 0x00, 0x6a, 0x22, 0x00, 0x20, 0x01, 0x6a, 0x22, 0x01, 0x20, 0x00,
  0x6a, 0x22, 0x00, 0x20, 0x01, 0x6a, 0x22, 0x01, 0x20, 0x00, 0x6a, 0x22,
  0x00, 0x20, 0x01, 0x6a, 0x21, 0x01, 0x20, 0x04, 0x41, 0x08, 0x6a, 0x22,
  0x04, 0x20, 0x05, 0x47, 0x0d, 0x00, 0x0b, 0x0b, 0x20, 0x02, 0x45, 0x0d,
  0x00, 0x03, 0x40, 0x20, 0x00, 0x20, 0x01, 0x22, 0x00, 0x6a, 0x21, 0x01,
  0x20, 0x03, 0x41, 0x01, 0x6a, 0x22, 0x03, 0x20, 0x02, 0x47, 0x0d, 0x00,
  0x0b, 0x0b, 0x20, 0x01, 0x0b, 0x04, 0x00, 0x41, 0x00, 0x0b, 0x04, 0x00,
  0x41, 0x00, 0x0b
};
unsigned int fib_random_len = 339;


unsigned char moveServo_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x64,
  0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x30, 0x01, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x12, 0x04, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x60, 0x02, 0x7f,
  0x7f, 0x00, 0x60, 0x00, 0x00, 0x60, 0x00, 0x01, 0x7f, 0x02, 0x2b, 0x02,
  0x03, 0x65, 0x6e, 0x76, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
  0x75, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x00, 0x01, 0x03, 0x65, 0x6e,
  0x76, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x49,
  0x6e, 0x74, 0x33, 0x32, 0x00, 0x00, 0x03, 0x04, 0x03, 0x02, 0x00, 0x03,
  0x07, 0x4d, 0x04, 0x11, 0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x63,
  0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x00, 0x02, 0x18,
  0x5f, 0x5f, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
  0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x63, 0x73,
  0x00, 0x02, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x6f,
  0x00, 0x03, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
  0x56, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x04, 0x0a, 0x1a, 0x03, 0x03, 0x00,
  0x01, 0x0b, 0x0a, 0x00, 0x41, 0x01, 0x20, 0x00, 0x10, 0x00, 0x41, 0x01,
  0x0b, 0x09, 0x00, 0x41, 0x02, 0x10, 0x01, 0x41, 0x05, 0x6a, 0x0b
};
unsigned int moveServo_wasm_len = 203;

unsigned char hash_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x03, 0x60,
  0x00, 0x00, 0x60, 0x01, 0x7f, 0x01, 0x7f, 0x60, 0x01, 0x7f, 0x01, 0x7f,
  0x03, 0x04, 0x03, 0x00, 0x01, 0x02, 0x07, 0x1b, 0x02, 0x07, 0x68, 0x61,
  0x73, 0x68, 0x32, 0x35, 0x36, 0x00, 0x01, 0x0d, 0x68, 0x61, 0x73, 0x68,
  0x32, 0x35, 0x36, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x00, 0x02, 0x0a,
  0x0e, 0x03, 0x02, 0x00, 0x0b, 0x04, 0x00, 0x20, 0x00, 0x0b, 0x04, 0x00,
  0x20, 0x00, 0x0b
};
unsigned int hash_wasm_len = 75;

static unsigned int run_wasm()
{
    M3Result result = m3Err_none;

    uint8_t* wasm = (uint8_t*)fib32_wasm;
    uint32_t fsize = fib32_wasm_len;

    printf("Loading WebAssembly...\n");
    IM3Environment env = m3_NewEnvironment ();
    if (!env) _FATAL("m3_NewEnvironment failed");

    IM3Runtime runtime = m3_NewRuntime (env, 1024, NULL);
    if (!runtime) _FATAL("m3_NewRuntime failed");

    IM3Module module;
    result = m3_ParseModule (env, &module, wasm, fsize);
    if (result) _FATAL("m3_ParseModule: %s", result);

    result = m3_LoadModule (runtime, module);
    if (result) _FATAL("m3_LoadModule: %s", result);

    IM3Function f;
    result = m3_FindFunction (&f, runtime, "fib");
    if (result) _FATAL("m3_FindFunction: %s", result);

    printf("Running...\n");

    result = m3_CallV(f, 4);
    if (result) _FATAL("m3_Call: %s", result);

    unsigned value = 0;
    result = m3_GetResultsV (f, &value);
    if (result) _FATAL("m3_GetResults: %s", result);

    printf("Result: %u\n", value);

    result = m3_FindFunction (&f, runtime, "fib");
    if (result) _FATAL("m3_FindFunction: %s", result);

    printf("Running...\n");

    result = m3_CallV(f, 4);
    if (result) _FATAL("m3_Call: %s", result);

    
    result = m3_GetResultsV (f, &value);
    if (result) _FATAL("m3_GetResults: %s", result);

    printf("Result: %u\n", value);

    
    return value;
}



unsigned char printImport_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0c, 0x02, 0x60,
  0x01, 0x7f, 0x00, 0x60, 0x02, 0x7f, 0x7f, 0x02, 0x7f, 0x7f, 0x02, 0x11,
  0x01, 0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x05, 0x70, 0x72,
  0x69, 0x6e, 0x74, 0x00, 0x00, 0x03, 0x02, 0x01, 0x01, 0x07, 0x07, 0x01,
  0x03, 0x61, 0x64, 0x64, 0x00, 0x01, 0x0a, 0x0c, 0x01, 0x0a, 0x00, 0x20,
  0x00, 0x20, 0x01, 0x10, 0x00, 0x20, 0x01, 0x0b
};
unsigned int printImport_wasm_len = 68;

m3ApiRawFunction(m3_Print) {
    m3ApiGetArg(uint32_t, variable);
    printf("Wasm Print : %d\n", variable);
    m3ApiSuccess();
}



static unsigned int run_wasm_print()
{
    M3Result result = m3Err_none;

    uint8_t* wasm = (uint8_t*)printImport_wasm;
    uint32_t fsize = printImport_wasm_len;

    printf("Loading WebAssembly...\n");
    IM3Environment env = m3_NewEnvironment ();
    if (!env) _FATAL("m3_NewEnvironment failed");

    IM3Runtime runtime = m3_NewRuntime (env, 1024, NULL);
    if (!runtime) _FATAL("m3_NewRuntime failed");

    IM3Module module;
    result = m3_ParseModule (env, &module, wasm, fsize);
    if (result) _FATAL("m3_ParseModule: %s", result);

    result = m3_LoadModule (runtime, module);
    if (result) _FATAL("m3_LoadModule: %s", result);

    // IM3Module module = runtime->modules;

    m3_LinkRawFunction (module, "imports", "print", "v(i)", &m3_Print);

    IM3Function f;
    result = m3_FindFunction (&f, runtime, "add");
    if (result) _FATAL("m3_FindFunction: %s", result);

    printf("Running...\n");

    result = m3_CallV(f, 4, 3);
    if (result) _FATAL("m3_Call: %s", result);

    unsigned value_1 = 0;
    unsigned value_2 = 0;
    result = m3_GetResultsV (f, &value_1, &value_2);
    if (result) _FATAL("m3_GetResults: %s", result);

    printf("Result: %u\n", value_1);
    return value_1;
}


// void null0_string(const char* str, char* out) {
//   int i;
//   for (i = 0; i < sizeof(out); i+=2) {
//     out[i/2] =  *( str + i );
//   }
//   out[(i/2) + 1] = '\0';
// }

void null0_string(const char* str, char* out) {
  int i;
  for (i = 0; i < sizeof(out); i+=1) {
    out[i] =  *( str + i );
  }
  out[i + 1] = '\0';
}


static m3ApiRawFunction (m3_Print_cstr) {
  m3ApiGetArgMem(const char*, _stext);
  char text[1024];
  null0_string(_stext, text);
  printf(text);
  vTaskDelay(1000 / portTICK_PERIOD_MS);
  m3ApiSuccess();
}


// usage example
static m3ApiRawFunction (null0_log) {
  m3ApiGetArgMem(const char*, _stext);
  printf("GetArgMem : %04x\n", (unsigned int)_stext);
  char text[1024];
  null0_string(_stext, text);
  printf("Print c_str : %s\n",text);
  m3ApiSuccess();
}


m3ApiRawFunction(m3_PrintStringFromMemory) {
    m3ApiGetArg(uint32_t, variable_1);
    m3ApiGetArg(uint32_t, variable_2);
    printf("Wasm Print String : \n \tindex : %d\n\tlength : %d\n", variable_1, variable_2);
    m3ApiSuccess();
}

unsigned char getString_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x06, 0x60,
  0x01, 0x7f, 0x00, 0x60, 0x02, 0x7f, 0x7f, 0x00, 0x60, 0x01, 0x7f, 0x01,
  0x7f, 0x60, 0x02, 0x7f, 0x7f, 0x02, 0x7f, 0x7f, 0x60, 0x00, 0x01, 0x7f,
  0x60, 0x00, 0x02, 0x7f, 0x7f, 0x02, 0x26, 0x02, 0x07, 0x69, 0x6d, 0x70,
  0x6f, 0x72, 0x74, 0x73, 0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x00, 0x00,
  0x07, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x0a, 0x70, 0x72, 0x69,
  0x6e, 0x74, 0x5f, 0x63, 0x73, 0x74, 0x72, 0x00, 0x00, 0x03, 0x07, 0x06,
  0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x04, 0x04, 0x01, 0x70, 0x00, 0x02,
  0x05, 0x03, 0x01, 0x00, 0x01, 0x07, 0x1c, 0x03, 0x03, 0x61, 0x64, 0x64,
  0x00, 0x04, 0x09, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
  0x00, 0x07, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x02, 0x00, 0x09,
  0x08, 0x01, 0x00, 0x41, 0x00, 0x0b, 0x02, 0x05, 0x06, 0x0a, 0x35, 0x06,
  0x09, 0x00, 0x20, 0x00, 0x20, 0x01, 0x36, 0x02, 0x00, 0x0b, 0x07, 0x00,
  0x20, 0x00, 0x28, 0x02, 0x00, 0x0b, 0x0c, 0x00, 0x20, 0x00, 0x20, 0x01,
  0x10, 0x00, 0x41, 0x01, 0x10, 0x03, 0x0b, 0x04, 0x00, 0x41, 0x01, 0x0b,
  0x04, 0x00, 0x41, 0x00, 0x0b, 0x0a, 0x00, 0x41, 0x08, 0x10, 0x01, 0x41,
  0x00, 0x41, 0x02, 0x0b, 0x0b, 0x15, 0x01, 0x00, 0x41, 0x00, 0x0b, 0x0f,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x69, 0x00, 0x6e, 0x00,
  0x69, 0x00, 0x74
};
unsigned int getString_wasm_len = 219;

unsigned char cstr_wasm[] = {
  0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x02, 0x60,
  0x01, 0x7f, 0x00, 0x60, 0x00, 0x00, 0x02, 0x11, 0x01, 0x03, 0x65, 0x6e,
  0x76, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x30, 0x5f, 0x6c, 0x6f, 0x67, 0x00,
  0x00, 0x03, 0x02, 0x01, 0x01, 0x05, 0x03, 0x01, 0x00, 0x01, 0x07, 0x11,
  0x02, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x00, 0x01, 0x06, 0x6d, 0x65, 0x6d,
  0x6f, 0x72, 0x79, 0x02, 0x00, 0x0a, 0x08, 0x01, 0x06, 0x00, 0x41, 0x01,
  0x10, 0x00, 0x0b, 0x0b, 0x0b, 0x01, 0x00, 0x41, 0x01, 0x0b, 0x05, 0x74,
  0x65, 0x73, 0x74, 0x00
};
unsigned int cstr_wasm_len = 88;

#define DEBUG 1
static unsigned int run_wasm_getString()
{
    M3Result result = m3Err_none;

    uint8_t* wasm = (uint8_t*)cstr_wasm;
    uint32_t fsize = cstr_wasm_len;

    printf("Loading WebAssembly...\n");

    vTaskDelay(1000 / portTICK_PERIOD_MS);

    IM3Environment env = m3_NewEnvironment ();
    if (!env) _FATAL("m3_NewEnvironment failed");

    IM3Runtime runtime = m3_NewRuntime (env, 1024, NULL);
    
    if (!runtime) _FATAL("m3_NewRuntime failed");
    runtime->memoryLimit = 1024;

    IM3Module module;
    result = m3_ParseModule (env, &module, wasm, fsize);
    if (result) _FATAL("m3_ParseModule: %s", result);

    printf("\nFree heap parse : %d\n", esp_get_free_heap_size());

    result = m3_LoadModule (runtime, module);
    if (result) _FATAL("m3_LoadModule: %s", result);

    printf("\nFree heap load : %d\n", esp_get_free_heap_size());

    // // IM3Module module = runtime->modules;

    m3_LinkRawFunction (module, "imports", "print", "v(i)", &m3_Print); 
    m3_LinkRawFunction (module, "imports", "print_cstr", "v(i)", &m3_Print_cstr);  
    m3_LinkRawFunction (module, "env", "null0_log", "v(i)", &null0_log);  

    IM3Function f;
    result = m3_FindFunction (&f, runtime, "init");
    if (result) _FATAL("m3_FindFunction: %s", result);

    

    printf("Running...\n");

    // result = m3_CallV(f);
    // if (result) _FATAL("m3_Call: %s", result);

    // unsigned value_1 = 0;
    // unsigned value_2 = 0;
    // result = m3_GetResultsV (f);
    // if (result) _FATAL("m3_GetResults: %s", result);

    // printf("Wasm Print String : \n \tindex : %d\n\tlength : %d\n", value_1, value_2);


    // // m3_FreeModule(module);
    // // m3_FreeRuntime(runtime);
    // // m3_FreeEnvironment(env);

    // return value_1;
    return 0;
}
